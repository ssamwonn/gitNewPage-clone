{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "es2017"],
    "allowJs": true,
    "skipLibCheck": true,
    // * .d ts 타입 검사를 건너뛴다
    "esModuleInterop": true,
    //런타임 바벨 생태계 호환성을 위한 __importStar와 __importDefault 헬퍼를 내보내고 타입 시스템 호환성을 위해 --allowSyntheticDefaultImports를 활성화합니다.
    "allowSyntheticDefaultImports": true,
    //default export가 없는 모듈에서 default imports를 허용합니다. 코드 방출에는 영향을 주지 않으며, 타입 검사만 수행합니다
    "strict": true,
    //모든 엄격한 타입 검사 옵션을 활성화합니다. -- strict를 활성화하면 --noImplicitAny, --noImplicitThis, --alwaysStrict, --strictNullChecks 및 --strictFunctionTypes이 가능합니
    "forceConsistentCasingInFileNames": true,
    //동일 파일 참조에 대해 일관성 없는 대소문자를 비활성화합니다.
    "noFallthroughCasesInSwitch": true,
    //스위치 문에 fallthrough 케이스에 대한 오류를 보고합니다.
    "module": "esnext",
    // 모듈 코드 생성 지정: "None", "CommonJS", "AMD", "System", "UMD", "ES6", "ES2015" 또는 "ESNext". "AMD"와 "System"만 --outFile과 함께 사용할 수 있습니다. "ES6"와 "ES2015" 값은 "ES5" 또는 이하를 대상으로 할 때 사용할 수 있습니다
    "moduleResolution": "node",
    //모듈 해석 방법 결정. Node.js/io.js 스타일 해석의 경우, "Node" 또는 "Classic" 중 하나입니다. 자세한 내용은 모듈 해석 문서를 참조하세요.
    "resolveJsonModule": true,
    //.json 확장자로 import된 모듈을 포함합니다.
    "isolatedModules": true,
    //추가 검사를 수행하여 별도의 컴파일 (예를 들어 트랜스파일된 모듈 혹은 @babel/plugin-transform-typescript) 이 안전한지 확인합니다.
    "noEmit": true,
    //출력을 내보내지 않습니다.
    "jsx": "react",
    //.tsx 파일에서 JSX 지원: "React", "Preserve", "react-native". JSX를 확인하세요.
    "preserveConstEnums": true,
    "removeComments": false,
    "noUnusedParameters": true,
    //사용하지 않는 매개 변수의 대한 오류를 보고합니다.
    "noUnusedLocals": true
    // 사용하지 않는 지역 변수의 대한 오류를 보고합니다.
  },
  "include": ["src"]
}
